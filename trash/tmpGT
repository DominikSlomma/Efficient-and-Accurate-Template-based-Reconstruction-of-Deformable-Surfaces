// tmp
#include<fstream>

void compareWithGroundTruth(open3d::geometry::TriangleMesh mesh, cv::Mat &output, int FrameNo) {
    // static int FrameNo = 0;
    double a = FrameNo; 
    a /= 25.0;
    a += 0.093333;
    a *= 30;
    // a -= 1;
    double no = std::round(int(a) % 20);
    std::cout << FrameNo << " " << no << " " << std::fmod(a, 20) <<std::endl;
    std::string no_str = std::to_string(int(no));
    auto pc = open3d::io::CreatePointCloudFromFile("../data/Hamlyn/f7/heartDepthMap_" + no_str + ".txt", "xyz");

    static open3d::t::geometry::TriangleMesh t_mesh = open3d::t::geometry::TriangleMesh::FromLegacy(mesh);
    open3d::t::geometry::PointCloud t_pc = open3d::t::geometry::PointCloud::FromLegacy(*pc);
    // t_mesh.Clear();

    auto scene = open3d::t::geometry::RaycastingScene() ;
    scene.AddTriangles(t_mesh);
    open3d::core::Tensor distances = scene.ComputeDistance(t_pc.GetPointPositions(),0);
    std::vector<float> values = distances.ToFlatVector<float>();
    
    cv::Mat mat(288, 360, CV_32F, values.data());
    cv::Mat scaled_mat;
    cv::normalize(mat, scaled_mat, 0, 255, cv::NORM_MINMAX, CV_8UC1);
    cv::Mat heatmap;
    cv::applyColorMap(scaled_mat, heatmap, cv::COLORMAP_JET);

    // cv::Mat in[] = {cv::Mat::zeros(scaled_mat.rows, scaled_mat.cols, CV_8UC1), cv::Mat::zeros(scaled_mat.rows, scaled_mat.cols, CV_8UC1), scaled_mat};
    cv::Mat in[] = {scaled_mat, scaled_mat, scaled_mat};
    int from_to[] = {0,0, 1,1, 2,2};
    cv::mixChannels(in, 3, &heatmap, 1, from_to, 3);
    
    double mean=0;
    std::vector<Eigen::Vector3d> pce = pc->points_;
    int counter = 0;
    for(int i=0;i<values.size();i++) {
        float val = values[i];
        if((pce[i].x() == 0) && (pce[i].y() == 0) && (pce[i].z() == 0))
            continue;
        counter++;
        mean += val;
        // std::cout << val << std::endl;
    }
    std::cout << mean/counter << " " << counter << std::endl;
    cv::imshow("Heatmap", heatmap);
    output = heatmap;
    
    // Zusammenführen der Kanäle zu einem 3-Kanal-Bild
    // cv::merge(in, 3, output);
}